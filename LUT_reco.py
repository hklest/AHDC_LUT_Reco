#!/usr/bin/env python3
"""
AHDC_LUT_reco.py

A simple LUT-based reconstruction for AHDC.
It loads the LUT generated by AHDC_LUT_generation.py.
Given an input hit pattern (as a bit-packed uint8 array),
it searches for the LUT entry that minimizes the Hamming distance
(with a simple brute-force search) and returns the corresponding
track parameters: momentum, polar angle, and phi_phase.
"""

import numpy as np

def load_LUT(filename="AHDC_LUT.npz"):
    data = np.load(filename)
    return data["LUT"], data["p_bins"], data["theta_bins"], data["phi_phase_bins"]

def hamming_distance(packed1, packed2):
    """
    Compute the Hamming distance between two packed uint8 arrays.
    """
    xor = np.bitwise_xor(packed1, packed2)
    # Count bits using np.unpackbits.
    return np.sum(np.unpackbits(xor))

def reconstruct_hit_pattern(measured_pattern, LUT, p_bins, theta_bins, phi_phase_bins):
    """
    Given a measured hit pattern (packed uint8 array of length n_bytes),
    search the LUT for the best match (lowest Hamming distance).
    Returns the reconstructed (p, theta, phi_phase).
    """
    best_dist = np.inf
    best_params = (None, None, None)
    N_P, N_THETA, N_PHI, _ = LUT.shape
    for i in range(N_P):
        for j in range(N_THETA):
            for k in range(N_PHI):
                lut_pattern = LUT[i, j, k, :]
                dist = hamming_distance(measured_pattern, lut_pattern)
                if dist < best_dist:
                    best_dist = dist
                    best_params = (p_bins[i], theta_bins[j], phi_phase_bins[k])
    return best_params, best_dist

if __name__ == "__main__":
    # Example usage:
    LUT, p_bins, theta_bins, phi_phase_bins = load_LUT()
    # Here, we assume measured_pattern is provided externally.
    # For demonstration, we load a test pattern from file "test_hitpattern.npz" if available.
    try:
        data = np.load("test_hitpattern.npz")
        measured = data["hit_pattern"]
        print("Loaded test hit pattern.")
    except Exception as e:
        print("No test hit pattern found. Exiting.")
        exit(1)
    (p_reco, theta_reco, phi_phase_reco), dist = reconstruct_hit_pattern(measured, LUT, p_bins, theta_bins, phi_phase_bins)
    print(f"Reconstructed parameters: p = {p_reco:.3f} GeV/c, theta = {theta_reco:.2f}°, phi_phase = {phi_phase_reco:.2f}° (Hamming distance: {dist})")
